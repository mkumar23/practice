class Solution {
public:
    int lengthOfLongestSubstring(string s) {
         if(s.length() == 0)
            return 0;
        map<string, int> flag;
        vector<int> len(s.length(),0);
        len[0] = 1;
        flag[string(1,s[0])] = 0;
        int prev = 0, max = 1;
        cout<<s.length();
        for(int i=1;i< s.length();i++)
        {
            auto search = flag.find(string(1,s[i]));
            
            if(search != flag.end() && search->second >= prev)
            {
                len[i] = i - search->second;
                prev = i+1-len[i];
            }
            else
            {
                len[i] = len[i-1] + 1;
            }
            flag[string(1,s[i])] = i;
            
            if(max<len[i])
                max = len[i];
        }
        return max;
    }
};